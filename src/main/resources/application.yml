#spring.datasource.url=jdbc:h2:tcp://localhost/~/sym;
#spring.datasource.driver-class-name=org.h2.Driver
#logging.level.org.hibernate.SQL=debug
#logging.level.org.hibernate.type=trace

debug: false # 로그백이 모든 디버그 로그를 찍을 수 있게 해준다.
management.endpoints.web.exposure.include: "*" # actuator endpoint 중 숨김 기능 전부 보여준다

logging: #
  level:
    com.sym: debug # 루트 패키지에서 발생한 로그들을 debug 레벨로 보겠다.
    org.springframework.web.servlet: debug # debug: false하는데 해당 기능으로 request, response 로그만 보겠다
    org.hibernate.type.descriptor.sql.BasicBinder: trace # JPA 기술을 사용할 때 쿼리 로그(물음표)에 값을 채워준다.

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/symproject
    username: tlqkrus012345
    password: kyu12345
    driver-class-name: com.mysql.cj.jdbc.Driver # MySQL 8 에 적합하다
  jpa:
    open-in-view: false # 스프링부트 경고 로그를 끄고 양속성 컨텍스트가 트랜잭션 범위 안에서 종료되게끔 osiv 설정을 끈다
    defer-datasource-initialization: true # 초기 테스트용 데이터베이스를 생성할 수 있다. resources 파일안에 data.sql
    hibernate.ddl-auto: create # ENTITY를 자동으로 ddl문으로 만들어준다.
    show-sql: true
    properties: # JPA에 종속된 properties를 설정
      hibernate:
        format_sql: true
        default_batch_fetch_size: 100 # 프록시 객체 같은것을 한꺼번에 size 설정한 만큼 in 쿼리로 조회한다
  h2.console.enabled: false # h2 웹 콘솔 보여주기
  sql.init.mode: always # resources/data.sql 파일 안에 값을 언제 넣을지 정한다.
  data.rest:
    base-path: /api
    detection-strategy: annotated

---
# yml 파일은 --- 기준으로 새로운 문서를 생성할 수 있다.
# testdb 용 문서
#spring:
#  config.activate.on-profile: testdb # testdb 파일이 activate 할 때 해당 문서를 읽는다
#  datasource:
#    url: jdbc:h2:mem:symproject;mode=mysql
#    driverClassName: org.h2.Driver
#  sql.init.mode: always
#  test.database.replace: none
